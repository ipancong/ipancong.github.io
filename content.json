{"pages":[{"title":"介绍一下我自己","text":"一名正在努力奋斗中的程序员，2018年硕士毕业。","link":"/about/index.html"}],"posts":[{"title":"《企业IT架构转型之道》读书笔记","text":"去年的时候就听说过《企业IT架构转型之道——阿里巴巴中台战略思想与架构实践》这本书，但是一直没有时间看，没想到自己入职的部门就是做技术中台的，前阵子另一位同是也提到了这本书，所以就顺手找出来读了一下。 这本书的作者是阿里巴巴首席架构师钟华，该书主要讲的是什么是中台战略思想，什么是阿里巴巴共享服务体系，为什么需要搭建共享服务体系，以及在搭建过程中具体用到的一些设计理念和技术思想。总得来说这是一本很全面的书，既有理论又有具体实践，并且都有具体的场景解释，是一本值得多读几遍，慢慢回味的书。 读这本书的目的，主要是为了理解中台战略的思想，因此对于书中提到的一些阿里独有的技术实践我没有仔细的读下去。下面就谈谈读了这本书以后，我对中台战略思想的一些理解： 首先，什么是技术中台？Supercell是芬兰的一家游戏公司（腾讯已经收购了该公司83.4%的股份），该公司旗下的游戏日活跃度过亿，例如我自己就玩过该公司的《部落冲突》和《皇室战争》，其实该公司总共只有两百多名员工，但是确做到了世界级游戏巨头，该公司将失败看作是一种常态，崇尚快速迭代，往往几个人组成一个小团队开发一个游戏并迅速投放市场，如果市场效果不好就很快终结，正是由于这种不断试错的方式才孕育出了《部落冲突》这样的世界级手游。为什么Supercell公司的几名员工组成的团队就可以开发游戏进行快速试错呢？原因就是Supercell有着非常强大的中台系统。那么中台的意思到底是什么，顾名思义，中台应该是介于前台和后台中间的平台，有点像编程时的适配层，起到承上启下的作用。前台是跟最终客户打交道的地方，强调的是小步快跑，快速适应和调整，满足最终用户需求，而中台则是强调资源整合、能力沉淀的平台体系，可以为“前台”的业务开展提供底层的技术、数据等资源和能力的支持，这就是常常被提到的“大中台、小前台”的战略思想。","link":"/2019/01/01/《企业IT架构转型之道》读书笔记/"},{"title":"2018年终总结","text":"今天是2018年最后一天了，去年元旦跟大姨他们一起吃团圆饭的画面仍然可以很清晰的浮现在我的脑海里。为什么我们越是长大越会觉得时间过得越快，其实是跟我们的经历有关的，对于一个5岁的小孩来说，一年的时间相当于他人生的五分之一，因此他会觉得一年的时间过得非常缓慢，而对于一个80岁的老人来说一年的时间是他已有人生的八十分之一而已，所以他会觉得一年的时间相当快。人生也是一样，我们可以把每过去的一年与往年作比较，如果这一年经历的事情比以前更有多、更刻骨铭心、更值得浏览，那么这一年就是成功的一年。 回想2018年，在学业、工作、爱情和家庭四个方面上都发生了大事，可以说今年是我人生的一个转折年。离开了校园、正式步入了职业生涯、跟冉冉在一起一周年、一直看着我长大的姨父病逝，这些事情让我更加成熟，逐渐的我身上会肩负着更多的责任。 今年年初，应该是我最为焦虑的一段时间，那时候面临着毕业的压力，大论文和小论文都还没有完成，需要整天奔波在大姨家和九龙湖校园间，加之导师又很忙，一直没空帮我们看论文，只能是一拖再拖。小论文要求是四月份发完，大概是三月底导师第一次批改完了小论文，记得那是晚上十点多钟，导师突然打电话过来跟我聊论文的事情把我批评的都开始怀疑人生了，于是开始拼命修改，光是小论文就改了四遍才好，值得庆幸的是小论文发表还算顺利，另外一个兄弟就惨了，又拖了一个月才发出去，幸好软件学院在五月份的时候还有一批小论文发表。不过，小论文发完了才是只是噩梦的开始，后面大论文才是真正的大头，首先我们的论文肯定是写的问题很多，写作水平也是比较低，导师每次看到我们的论文都是一脸嫌弃，但问题的关键是我们论文做的内容是实习过程中接触的东西，并不是导师的研究方向，这就是一个大矛盾，导师一面嫌弃我们写的不好，一面又无法给论文内容本身提出建设性的建议，只能在论文的整体结构、写作文法、用词等方面给我们修改。每次取学校回去，我们两就像是难兄难弟，从学校一路走出回去聊会儿人生然后各自回家。幸运的是，论文经过多次修改最终还是达到了导师的要求，六月初导师同意我送审了，送审的结果也是非常顺利，学校和企业都给出了八十多分，顺利进入答辩程序。当然，得益于导师的严格要求，论文几乎是没有什么问题的，答辩过程非常顺利，答辩组专家只提出了论文本身领域方面的问题，论文本身并没有挑出任何毛病，最终答辩结果还是良好，非常开心，就这样顺利的毕业啦。 论文答辩完，顺利毕业以后，我想着从毕业到工作这段时间可是我近三十年里最安逸的时间了，我可不能这么早就取工作，于是将入职时间推迟到了八月份。这段时间呢，我的主要任务有两个，其一是陪着冉冉一起玩完，其二呢就是我得把我的驾照考完。不过六月份毕业，离七月份冉冉放暑假的时间很近了，我们也并没有玩多少地方，中途去了苏州和扬州两个地方，大概是七月六号左右，我就回去开始学车了。要说这学车，那我是老厉害了，其实在2017年暑假的时候我就报名了，然后一直没空去驾校培训，直到2018年1月的时候才考了科目一，然后2018年7月6号进驾校，7月15、16两天科目二科目三全部顺利通过，前后其实也就练车十来天时间，简直就是教练见过的最具有天赋的学员，几乎不用操心就拿到了驾照，而且是在这极短的时间内。 2018年7月30日是我人生中非常重要的转折点，这一天我正式步入职业生涯，从校园步入了职场，但是我并没有觉得这两者有什么不同，职场对我来说只是一个更大的校园罢了。作为一名IT男，我感觉我们同事之间的关系都非常简单，做技术的嘛，you can you up，当然搞人际关系、拍马屁那些也是很重要的咯，不过暂时我还是以学技术为主，努力进步，艰苦奋斗。说实话，我也并没有非常明确的职业生涯目标，即使有现在也是不作数的，目前我唯一想要的就是别人搞不定的问题我能搞定，生活需要成就感。八月份开始工作，到现在也是五个月了，总得来说我还是很开心，学到很多东西，碰上了一群可爱的人。 今年也度过了我和冉冉的一周年，酸甜苦辣苦都全啦，南京该玩的地方几乎都去过了，今年还去了苏州、扬州、黄山这几个地方玩了一圈，不过还是太少了。自从我上班以后，我们就没有出过南京市玩过了，一到周末就想赖在家里，实在是太不好了。2019年要做出改变，我们要多出去玩，多看电影，多看书，还有更重要的，要多写文章，用文字记录美。 今年最伤心的事情是我大姨父去世，大概从我五岁那年起，我几乎就是和我大姨生活在一起的，姨娘姨父对我来说比我的爷爷奶奶还亲，可以说没有我他们就不会有我的今天。今年7月份我拿到驾照的时候，姨父还是好好的，没有明显的症状，但是到我上班以后身体每况愈下，检查出来已经迟了，悲痛之情溢于言表，直到现在每每想到姨父身前的画面，我还是会情不自禁的流泪。有一次，冉冉问我在我五岁之前的记忆里面，会先想起谁，我说那就是我大姨父了，那是一个黄昏，天气不冷，我姨父把我从我奶奶家那边的幼儿园接到我外婆家，那时候他们县城里的房子拆迁，姨娘和姨父便住在外婆家，那段时光已经模糊了，但是也不知道为什么这个画面就是一直在我脑海里面。 以上，就是2018年发生在我身上的几件重要的事情。祝愿在新的2019年，我和我身边的人都能健健康康，心想事成！ ​ ​ 2019.1.1 ​ 潘聪","link":"/2018/12/31/2018年终总结/"},{"title":"坐在南京图书馆","text":"坐在南京图书馆，此时此刻，我想吟诗一首…","link":"/2019/03/03/坐在南京图书馆/"},{"title":"葱葱冉冉的小屋正式落成","text":"今天是2018年的倒数第二天，前几天思来想去我该送个什么新年礼物给冉冉好呢，送东西吧，每次都是没有创意，不知道该送啥，发红包吧，又会显得太没有诚意了，(⊙o⊙)…，那我还是发挥我的专长做点儿实际的东西吧，于是“葱葱冉冉的小屋”个人博客就正式落成啦。以前，我就一直想找个地儿给我们自己记录一些事情，前阵子看到冉冉在给学校的公众号号发文章，感觉她文笔还是很有活力的，想必对写东西还是有点儿兴趣。申请一个公众号，虽然简单，但是感觉限制有点儿多了，必须得用微信那一套发文章，写出来的东西还只能在微信里面看，不够灵活，而搭建个人博客是一种很好的选择，说做就做呗，这也难不倒我。但是，个人博客是弄完了，我是把个人博客托管在github上面的，那我总不能用git的域名吧，这样也不能博得红颜一笑呀，于是我就更加用心一点吧，去阿里云买了个有爱的域名，从此以后这个域名就被我承包了，嗯，开心~ 多读书、多写文章、多让冉冉开心，2019加油！ https://lovezr.top","link":"/2018/12/30/葱葱冉冉的小屋正式落成/"},{"title":"路遥的平凡世界","text":"2019年，许给自己的愿望是“探寻到更多的美好”，可是元旦当天就是各种烦躁，究其原因，无非就是虚度了光阴、拖延了任务。安逸是舒适的，可也会滋养不安，还是动起来比较好。看到潘先生乐呵呵的写着博客，心生艳羡，那就见贤思齐吧。第一篇定为《路遥的平凡世界》，源于今天偶然读到的“路遥事迹”中的一句话——“路遥一生都没有走出这段恋情所带来的幸福与阴影”。不喜欢看到“人生、一生”之类的字眼，私以为人人都有自己的感悟，但妄言“人生”总有故弄玄虚之嫌。路遥，曾是带给我很多感动、温暖和无尽力量的名字。坐在藤椅上翘着二郎腿，手里夹着燃烧了一半的烟蒂，静静听着提问，简约的回答几句，睿智、淡然、厚重，这是我给先生的画像。可这个几乎是我精神领袖的路遥，却被这样的一句话概括。真希望有个人能够理解我读到这句话时的愤怒和不安。愤愤然的读完了整篇，终于长舒一口气——应是作者水平不高，用苦情博眼球，这才有了这么有别于想象的路遥。我的想象依然屹立不倒，不过这些关于他的故事，也化为画像中的眉头一皱无法抹去。关于《平凡的世界》，我有一些感想想倾诉。崇拜平凡的世界，在不平凡的时代背景下展开。种种听说和避讳，让那个时代神秘非常；因为和父母的年纪相当，又使得它亲切无比。带着好奇和好感，走进那个世界。幸运的是，那时候有静下来的心性，慢慢的读完整本。更幸运的是，它给了我力量和感动，时间越久，感动愈深，化为我割舍不了的一部分。这本书几乎是我整个高中阶段的精神家园。很多人物都会发光。少安沉着、努力，肩负着整个家庭的重担，难得的是他担的很好；少平自由、充盈，时时刻刻探索着新鲜；兰香最让我羡慕，少时的贫苦仿佛是一种馈赠，赠与她一切美好的品质，成就美丽的人和人生。高中总是不免面临窘迫和迷茫，有过那么几次，我将自己设定成少平、设定成兰香，用他们的眼睛看世界，果然有无穷的力量。我很少崇拜，但当他们用尽全力活着的时候，就已经让我崇拜不已。共鸣今天看到作者路遥的过往，忽然联想到书中常常出现“亲爱的某某”这样的字眼，以及不曾刻意渲染却贯穿全书的紧密的亲情。以前听人说“人总是缺什么就强调什么”，这样想来不免残忍。比起向世界证明自己是有人关爱的孩子，我觉得作者这样写，更多的是在回首时对自己的安慰和怜惜，对此我有深深的共鸣。小时候经济条件不是很好，面包是奢侈的零食，学校门口那种松软的、可以撕成一层一层的面包要5毛钱，可是一直读到五年级离开那所学校，我都不曾舍得买过一块。大学时在红跑车看到手撕包，味蕾忽然将自己拉到那个看着零食车纠结的场景，长大的我怜惜的看着小时候的我，真希望可以穿越时光，买够让她满足的面包，真想紧紧的抱着她，告诉她，可以放肆不必委屈。作者的心境应该类似，小小的年纪，隐忍的承受着离别、故作懂事的顺从，跨越时光的长河，他写了一整个温暖的家族去陪伴和安慰幼年的自己。如果可回首，我希望自己曾自由放肆，充分表达对物质、对关爱的需求，任性也是一种美德、是对自己的慈悲。主题爱情、亲情、友情、家庭、人生、成功喜乐……我们不厌其烦的反复探讨这些主题，却一直不得正解。所以啊，如果你有故事，无需引申，请细细的说于我听，主题的滋味交于我自行品味。你好，2019的平凡世界！","link":"/2019/01/03/路遥的平凡世界/"},{"title":"新员工生涯画上句号","text":"记得非常清楚，我的正式进入工作岗位的时间是2018年8月6号，是个好日子，数字都非常的吉利。作为新员工已经快半年了，上周参加了转正答辩，新员工的生涯画上了圆满的句号。 回顾这几个月的工作，总得来说对自己还是相当满意的，感觉自己成长的很快。感觉自己很幸运，在刚步入职场就能碰上自己喜欢的主管，还有一些可爱的同事，我始终认为环境对人的影响是巨大的，每天都置身于符合自己预期的环境里工作，是一件多么幸福的事情呀。在新员工的这几个月里，我表现的非常积极，我心里就想着一定要有个开门红，第一年好，后面会越来越好，如果第一年工作就感觉很不如意，后面肯定也很难有好的起色。 目前来说，我也只能做这一行了，因为我其他啥也不会呀，又没有本钱做生意之类的。俗话说，女怕嫁错郎，男怕入错行，我觉得只要自己感兴趣，做着有成就感，干干净净、有尊严的赚钱就是一个适合自己的行当。IT行当有时候确实是比较辛苦，但是好在收入和前景都是比较乐观的。我觉得我至少会在这行摸爬滚打十几年，所以从现在开始我就要对自己后面的这十几年负责，慢慢积累，一步一个脚印儿慢慢向前走。 今年拿了“明日之星”奖项，答辩结果暂时还没有出来，如果再有一个新员工就相当完美了！ 送给自己几个关键词： 不退缩、不畏惧、有恒心、有毅力、艰苦奋斗、勇往直前！！！ 另外还需要某人的支持与鼓励，我才会走的更快！(^__^) 嘻嘻……","link":"/2019/01/18/新员工生涯画上句号/"},{"title":"Maven基础知识","text":"Maven基础知识Maven几乎天天在用，但是从来没有系统学习或者深入研究过。 1. Maven是什么首先呢，Maven是一种服务于Java平台的自动构建工具。所谓构建，简单来说就是以“java源代码”，“html”，“javascript”，“静态资源”等为资料，生产出可以运行的项目的过程。 2. Maven构建环节2.1 清理（clean）删除之前编译得到的字节码文件，清理本地项目下的target目录。 2.2 编译（compile）编译项目。 2.3 测试（test）编译项目，执行test目录下的单元测试用例。 2.4 打包（package）完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。 mvn clean package依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)等７个阶段。 2.5 安装（install）完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库。 mvn clean install依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install等8个阶段。 2.6 部署（deploy）完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。 mvn clean deploy依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。 3. Maven核心概念3.1 Maven工程的目录结构maven工程目录必须要遵循如下的结构，因为maven在工作工程中必须知道相关文件保存在哪个目录。 根目录：工程名 src目录：源码目录 pom.xml文件：Maven的核心配置文件 main目录：存放主程序 test目录：存放测试 java目录：存放java源代码 resources目录：存放相关资源文件或者配置文件 3.2 POM文件Project Object Model，maven构建过程中一切相关配置都是在该文件中。 3.3 坐标二维坐标可以表征一个平面中的任意一点，而三维坐标则可以表征空间中的任意一点，maven中就是通过三位坐标来唯一确定一个maven工程： groupId：公司或者组织域名倒叙+项目名称 artifacteId：模块名称 version：版本号 3.4 依赖从依赖范围来分，主要分为三种: compile范围依赖 a. 对主程序有效 b. 对测试程序有效 c. 参与打包 d. 参与部署 test范围依赖 a. 对主程序无效 b. 对测试程序有效 c. 不参与打包 d. 不参与部署 例如：junit provided范围依赖 a. 对主程序有效 b. 对测试程序有效 c. 不参与打包 d. 不参与部署 例如：springboot内置tomcat，servlet-api.jar 3.5 仓库 本地仓库 settings文件中的配置，存储在本地的仓库。 远程仓库 远程仓库分为三种： a. 私服：搭建在局域网中环境中，为公司或者组织内成员的maven工程服务。 b. 中央仓库：为全世界Maven工程服务。 c. 中央仓库镜像：分担中央仓库的负载，提升访问速度。 3.6 生命周期 各个构建环境的顺序是上图的由上往下的顺序。 生命周期中的各个阶段，无论执行哪个阶段，都是从这个生命周期最初的阶段开始执行。 Maven核心程序中定义了抽象的生命周期，各个阶段的具体任务都是由相应的插件来完成的。 例如：mvn package 会调用 maven-jar-plugin 这个插件进行打包。注意，在直接调用mvn package不一定会重新生产jar包，只有出现以下几种情况maven会认为jar包不是最新的： a. jar包不存在（其实就是mvn clean的效果） b. 传入比较的文件资源不存在 c. Resource with unknown modification date found，资源的修改时间未知 d.Resource with newer modification date found，jar包的最后修改时间比资源的最后修改时间早 理论上来讲不做mvn clean 得到的jar包应该是最新的，除非其他方式修改jar包中的内容而不修改源代码。平时可以用mvn install，而不进行chean节省时间（如果你觉得节省时间多的话），但最保险还是用 mvn clean install 生成最新的jar包，如果不想用mvn clean又想保证jar包最新，建议添加 -Djar.forceCreation 参数。 3.7 依赖 依赖的传递性 对于compile范围的依赖是具有传递性的，每个工程中不必重复声明。 依赖的排除 对于不需要的jar包，或者不稳定的jar包，可以使用排除。 依赖的统一管理 自定义版本号，统一维护。 依赖原则 弄清楚依赖原则，能够解决工程之间的jar包冲突问题。 (1) 路径最短优先原则 (2) 路径相同时先声明者优先&lt;dependency顺序&gt; 3.8 继承一个工程中通常是包含了很多的模块，那么如何保证各个模块中使用的公共jar包的版本都是统一的呢？ 解决思路是将各个模块共用的jar包的版本控制统一移动到父工程中。 注意： 父工程仅仅是为了做统一的版本控制，它的打包方式应该是pom 子工程中应该要声明父工程的引用 子工程中不需要配置相关依赖的版本号，只需要声明即可，版本号在父工程中统一配置 clean install时会首先安装父工程 3.9 聚合一键安装各个模块的工程。 4. 问题定位4.1 tomcat加载的jar包版本与工程中需要的不匹配 问题场景：operation工程的bsp工程中需要log4j的1.x的jar包，比较凑巧的是我们的镜像是基于fusionstage原生portal的容器来做的，而它的tomcat依赖的jar包中刚好有log4j1.x的包，由于1.x的版本在公司pdm库中已经不推荐使用，所以在打包的时候我们就把该jar包排除了，这样项目既可以正常运行，有能提升开源认证的得分。 问题产生原因：我在重新做基础镜像的时候，看到fusionstage原生portal容器中的tomcat里面已经采用的是log4j 2.x的版本，而log4j 1.x 和 2.x的差别还挺大，类的导入方式都不一样，因此我们的项目在新的基础镜像上运行的时候会报错，说找不到类。 解决方案一： 在我们打包的时候不要排除log4j 1.x的依赖，但是这样会影响开源认证，1.x的已经是D版本了。 解决方案二： 找到bsp的新版本的依赖，如果新版本刚好也用的是log4j 2.x的话，那么就不会有问题了。 4.2 starters工程出新包，其他工程引用不到的问题 问题场景：portal打包的执行机有很多台，每次打包时会随机选择一台，当打包starters工程时也是只会在一台机器上打包，这时候当其他组件打包需要依赖starters，而这次打包又没在刚才那台机器上的时候，最新的starters就不会被打进去。 问题产生原因：编译其他组件时，不会自动取starters最新版本，只会取本地的。 解决方案一： 最早的时候在编译starters后，会把最新的starters的jar包拷贝到其他执行机的maven本地仓库中。这种方式当执行机更换时，需要改动，很不方便，而且很累赘。 解决方案二： 在编译其他组件之前，都首先编译一下starters，这种方式的缺点时会导致编译时间延长(starters编译大概需要两分钟)，目前在paas-config-center中我还是保留了相关配置。 解决方案三： 该方案需要线了解Snapshot版本和Release版本的概念 Maven中的仓库分为两种，Snapshot快照仓库和Release发布仓库。Snapshot快照仓库用于保存开发过程中的不稳定版本，Release正式仓库则是用来保存稳定的发行版本。将工程的pom中版本号后面加上上-SNAPSHOT即是快照版本。 maven会根据版本号后面是否有-SNAPSHOT来判断是快照版本还是正式版本，deploy时会发布到不同的远程库中。 使用快照版本的模块，在不更改版本号的情况下，直接编译打包时，Maven会自动从镜像服务器上下载最新的快照版本。如果是正式发布版本，那么在mvn deploy时会自动发布到正式版本库中，而使用正式版本的模块，在不更改版本号的情况下，编译打包时如果本地已经存在该版本的模块则不会主动去镜像服务器上下载。 在开发阶段，可以将公用库的版本设置为快照版本，而被依赖组件则引用快照版本进行开发，在公用库的快照版本更新后，我们也不需要修改pom.xml文件提示版本号来下载新的版本，直接Maven执行相关编译、打包命令即可重新下载最新的快照库了，从而也方便了我们进行开发。 虽然，快照的情况下，Maven在日常工作中会自动获取最新的快照，但是偶尔会不灵（原因不清楚），但是可以在任何Maven命令中使用-U参数强制Maven下载最新的快照构建。命令如下： 1mvn clean package -U","link":"/2019/04/14/Maven基础知识/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","link":"/tags/读书笔记/"},{"name":"记录","slug":"记录","link":"/tags/记录/"},{"name":"生活","slug":"生活","link":"/tags/生活/"},{"name":"工作","slug":"工作","link":"/tags/工作/"},{"name":"工程能力","slug":"工程能力","link":"/tags/工程能力/"}],"categories":[{"name":"随笔","slug":"随笔","link":"/categories/随笔/"},{"name":"读书笔记","slug":"随笔/读书笔记","link":"/categories/随笔/读书笔记/"},{"name":"感悟","slug":"随笔/感悟","link":"/categories/随笔/感悟/"},{"name":"编程","slug":"编程","link":"/categories/编程/"}]}